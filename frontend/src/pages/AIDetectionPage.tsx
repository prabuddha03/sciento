import { useState } from 'react';
import { useMutation } from '@tanstack/react-query';
import { ExclamationTriangleIcon } from '@heroicons/react/24/outline';
import { CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/solid';
import FileUploader from '../components/FileUploader';
import LoadingSpinner from '../components/LoadingSpinner';
import paperService from '../services/paperService';
import type { AIDetectionResponse } from '../services/paperService';

const AIDetectionPage = () => {
  const [file, setFile] = useState<File | null>(null);
  const [text, setText] = useState<string>('');
  const [uploadType, setUploadType] = useState<'file' | 'text'>('file');
  const [detectionResult, setDetectionResult] = useState<AIDetectionResponse | null>(null);

  const detectAIMutation = useMutation({
    mutationFn: (fileOrText: File | string) => paperService.detectAI(fileOrText),
    onSuccess: (data) => {
      setDetectionResult(data);
      window.scrollTo({ top: 0, behavior: 'smooth' });
    },
  });

  const handleFileSelect = (selectedFile: File) => {
    setFile(selectedFile);
    setDetectionResult(null);
  };

  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setText(e.target.value);
    setDetectionResult(null);
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (uploadType === 'file' && file) {
      detectAIMutation.mutate(file);
    } else if (uploadType === 'text' && text.trim()) {
      detectAIMutation.mutate(text);
    }
  };

  const renderConfidenceMeter = (confidence: number) => {
    const percentage = confidence * 100;
    return (
      <div className="mt-4 mb-6">
        <div className="flex justify-between mb-1">
          <span className="text-sm font-medium text-gray-700">Confidence</span>
          <span className="text-sm font-medium text-gray-700">{percentage.toFixed(0)}%</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2.5">
          <div
            className={`h-2.5 rounded-full ${
              percentage >= 80 ? 'bg-red-600' : percentage >= 50 ? 'bg-yellow-500' : 'bg-green-500'
            }`}
            style={{ width: `${percentage}%` }}
          ></div>
        </div>
      </div>
    );
  };

  return (
    <div>
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-900">AI Text Detection</h1>
        <p className="mt-2 text-gray-600">
          Check if text was generated by an AI system by uploading a PDF or pasting text.
        </p>
      </div>

      {detectionResult ? (
        <div>
          <div className="mb-6 flex justify-between items-center">
            <h2 className="text-2xl font-bold text-gray-900">Detection Results</h2>
            <button 
              onClick={() => setDetectionResult(null)} 
              className="btn btn-secondary"
            >
              Check Another Text
            </button>
          </div>

          {detectionResult.success && detectionResult.result ? (
            <div className="bg-white rounded-xl shadow-md overflow-hidden mb-8">
              <div className="p-6">
                <div className="flex items-center mb-4">
                  {detectionResult.result.isAIGenerated ? (
                    <>
                      <XCircleIcon className="h-10 w-10 text-red-600 mr-3" />
                      <h3 className="text-xl font-semibold text-red-700">
                        AI-Generated Content Detected
                      </h3>
                    </>
                  ) : (
                    <>
                      <CheckCircleIcon className="h-10 w-10 text-green-600 mr-3" />
                      <h3 className="text-xl font-semibold text-green-700">
                        Likely Human-Written Content
                      </h3>
                    </>
                  )}
                </div>

                {renderConfidenceMeter(detectionResult.result.confidence)}
                
                <div className="p-4 border border-gray-200 rounded-lg bg-gray-50">
                  <h4 className="text-md font-medium text-gray-900 mb-2">Explanation</h4>
                  <p className="text-gray-700">{detectionResult.result.explanation}</p>
                </div>
              </div>
            </div>
          ) : (
            <div className="mt-4 p-3 rounded bg-red-50 border border-red-200 text-red-700">
              <p className="font-medium">Error fetching detection results</p>
              <p className="text-sm mt-1">Could not retrieve analysis data. Please try again.</p>
            </div>
          )}
        </div>
      ) : (
        <div className="bg-white rounded-xl shadow-md overflow-hidden">
          <div className="p-6">
            <div className="flex border-b border-gray-200">
              <button
                type="button"
                onClick={() => setUploadType('file')}
                className={`py-3 px-4 border-b-2 font-medium text-sm ${
                  uploadType === 'file'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Upload PDF
              </button>
              <button
                type="button"
                onClick={() => setUploadType('text')}
                className={`py-3 px-4 border-b-2 font-medium text-sm ${
                  uploadType === 'text'
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                Paste Text
              </button>
            </div>
            
            <form onSubmit={handleSubmit} className="mt-6">
              {uploadType === 'file' ? (
                <FileUploader
                  onFileSelect={handleFileSelect}
                  accept=".pdf"
                  label="Upload PDF Document"
                />
              ) : (
                <div>
                  <label htmlFor="text" className="form-label">
                    Paste Text to Analyze
                  </label>
                  <textarea
                    id="text"
                    rows={10}
                    value={text}
                    onChange={handleTextChange}
                    placeholder="Paste the text you want to check for AI generation..."
                    className="form-input mt-1 font-mono"
                  ></textarea>
                  {text && text.length < 100 && (
                    <p className="form-error">
                      Text should be at least 100 characters for accurate detection.
                    </p>
                  )}
                </div>
              )}

              <div className="mt-8">
                <button
                  type="submit"
                  disabled={
                    (uploadType === 'file' && !file) ||
                    (uploadType === 'text' && text.length < 100) ||
                    detectAIMutation.isPending
                  }
                  className={`btn btn-primary w-full ${
                    ((uploadType === 'file' && !file) ||
                      (uploadType === 'text' && text.length < 100) ||
                      detectAIMutation.isPending)
                      ? 'opacity-50 cursor-not-allowed'
                      : ''
                  }`}
                >
                  {detectAIMutation.isPending ? (
                    <span className="flex items-center justify-center">
                      <LoadingSpinner size="small" text="" />
                      <span className="ml-2">Analyzing...</span>
                    </span>
                  ) : (
                    'Detect AI Content'
                  )}
                </button>
              </div>

              {detectAIMutation.isError && (
                <div className="mt-4 p-3 rounded bg-red-50 border border-red-200 text-red-700 flex items-start">
                  <ExclamationTriangleIcon className="h-5 w-5 mr-2 flex-shrink-0 mt-0.5" />
                  <div>
                    <p className="font-medium">Error analyzing content</p>
                    <p className="text-sm mt-1">
                      {detectAIMutation.error instanceof Error
                        ? detectAIMutation.error.message
                        : 'An unexpected error occurred. Please try again.'}
                    </p>
                  </div>
                </div>
              )}
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default AIDetectionPage; 